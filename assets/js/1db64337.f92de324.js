"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1372],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(t),d=a,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6777:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],l={id:"overview"},s="Overview",c={unversionedId:"overview",id:"overview",isDocsHomePage:!1,title:"Overview",description:"Introduction",source:"@site/docs/overview.md",sourceDirName:".",slug:"/overview",permalink:"/docs/overview",tags:[],version:"current",frontMatter:{id:"overview"},sidebar:"oveview",next:{title:"Getting Started",permalink:"/docs/getting-started"}},p=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"Examples",id:"examples",children:[{value:"Normal",id:"normal",children:[],level:3},{value:"Function composition",id:"function-composition",children:[],level:3},{value:"Handling asynchronous data",id:"handling-asynchronous-data",children:[],level:3},{value:"Concurrent",id:"concurrent",children:[],level:3},{value:"Error handle",id:"error-handle",children:[],level:3}],level:2}],u={toc:p};function m(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"overview"},"Overview"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"FxTS is a library for functional programming using iterable/asyncIterable.\nIt provides users to write more declarative code, as well as to handle asynchronous data and functions."),(0,o.kt)("p",null,"to build the above, we have many features such as:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Lazy evaluation",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"It is a useful way to represent large or possibly infinite enumerable data."))),(0,o.kt)("li",{parentName:"ul"},"Handling concurrent requests",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"It can handle multiple asynchronous requests and also control the count of requests."))),(0,o.kt)("li",{parentName:"ul"},"Type inference",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Function composition can be inferred."))),(0,o.kt)("li",{parentName:"ul"},"Follow ",(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols"},"iteration protocal")," Iterable / AsyncIterable",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"FxTS follows the protocol of the language standard.\nThis means that it matches well with existing functions and functions that will be added in the future.")))),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("h3",{id:"normal"},"Normal"),(0,o.kt)("p",null,"We provide ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Lazy_evaluation"},"lazy evaluation"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { pipe, peek, range, map, filter, take, toArray } from "@fxts/core";\n\npipe(\n  range(100),\n  peek((a) => console.log(a)), // log 4 times (1,2,3,4)\n  map((a) => a + 10),\n  filter((a) => a % 2 === 0),\n  take(2),\n  toArray,\n);\n')),(0,o.kt)("p",null,"Even if you do ",(0,o.kt)("inlineCode",{parentName:"p"},"filter")," after ",(0,o.kt)("inlineCode",{parentName:"p"},"map"),", it doesn't matter. 2 items are extracted, (only 4 items are evaluated 1,2,3,4). Lazy functions can be found ",(0,o.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/index#lazy"},"here")),(0,o.kt)("h3",{id:"function-composition"},"Function composition"),(0,o.kt)("p",null,"Combinations of ",(0,o.kt)("inlineCode",{parentName:"p"},"Lazy")," functions don't evaluate actual values like ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator"},"generator"),".\nIt can be evaluate with a Strict(",(0,o.kt)("inlineCode",{parentName:"p"},"toArray"),") or ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"},"for-of"),", ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of"},"await for-of"),". Strict functions can be found ",(0,o.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/index#strict"},"here")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { pipe, range, map, filter, take, toArray } from "@fxts/core";\n\nconst nums = pipe(\n  range(Infinity),\n  map((a) => a * a),\n  take(3),\n); // not evaluated not yet\n\nconst result = pipe(\n  nums,\n  filter((a) => a % 2 === 0),\n  toArray, // Strict function\n);\n')),(0,o.kt)("h3",{id:"handling-asynchronous-data"},"Handling asynchronous data"),(0,o.kt)("p",null,"When dealing with asynchronous values"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { pipe, peek, range, map, filter, take, toArray } from "@fxts/core";\n\nconst input = await Promise.resolve([1, 2, 3, 4]);\n\nawait pipe(\n  toAsync(input),\n  map(async (a) => a + 10),\n  filter((a) => a % 2 === 0),\n  take(2),\n  toArray,\n);\n')),(0,o.kt)("p",null,"When asynchronous values are contained in an array"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { pipe, toAsync, peek, range, map, filter, take, toArray } from "@fxts/core";\n\nawait pipe(\n  toAsync([\n    Promise.resolve(1),\n    Promise.resolve(2),\n    Promise.resolve(3),\n    Promise.resolve(4),\n  ]),\n  map((a) => a + 10),\n  filter((a) => a % 2 === 0),\n  take(2),\n);\n')),(0,o.kt)("h3",{id:"concurrent"},"Concurrent"),(0,o.kt)("p",null,"It handles multiple asynchronous requests and also controls the count of requests"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { pipe, toAsync, delay, peek, range, map, filter, take } from "@fxts/core";\n\nawait pipe(\n  toAsync(range(Infinity)),\n  map((page) => delay(1000, page)), // 1,2,3,4,5,6\n  filter((a) => a % 2 === 0), // 2,4,6\n  concurrent(3),\n  take(2),\n  toArray, // 2 seconds\n);\n')),(0,o.kt)("p",null,"You can see that it takes 6 seconds when requesting one by one but takes 2 seconds when requesting using ",(0,o.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/concurrent"},"concurrent")),(0,o.kt)("p",null,"A more practical code is below."),(0,o.kt)("iframe",{src:"https://codesandbox.io/embed/fxts-concurrent-useful-0frg2?fontsize=14&hidenavigation=1&theme=dark",style:{height:800,width:"100%",border:0,borderRadius:4,overflow:"hidden"},title:"fxts-concurrent-useful",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}),(0,o.kt)("h3",{id:"error-handle"},"Error handle"),(0,o.kt)("p",null,"Since FxTS follows the protocol of standard, you can easily handle errors with ",(0,o.kt)("inlineCode",{parentName:"p"},"try-catch"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"synchronous")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { pipe, toAsync, toArray } from "@fxts/core";\n\ntry {\n  pipe(\n    [1, 2, 3, 4, 5],\n    map((a) => {\n      throw "err";\n    }),\n    toArray,\n  );\n} catch (err) {\n  // handle err\n}\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"asynchronous")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { pipe, toAsync, map, toArray } from "@fxts/core";\n\ntry {\n  await pipe(\n    Promise.resolve([1, 2, 3, 4, 5]),\n    map((a) => {\n      throw "err";\n    }),\n    toArray,\n  );\n} catch (err) {\n  // handle err\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { pipe, toAsync, map, toArray } from "@fxts/core";\n\ntry {\n  await pipe(\n    toAsync([\n      Promise.resolve(1),\n      Promise.resolve(2),\n      Promise.resolve(3),\n      Promise.resolve(4),\n    ]),\n    map(async (a) => {\n      throw "err";\n    }),\n    toArray,\n  );\n} catch (err) {\n  // handle err\n}\n')))}m.isMDXComponent=!0}}]);