"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9820],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),s=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(t),f=o,m=d["".concat(i,".").concat(f)]||d[f]||p[f]||a;return t?r.createElement(m,c(c({ref:n},u),{},{components:t})):r.createElement(m,c({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=d;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,c[1]=l;for(var s=2;s<a;s++)c[s]=t[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8381:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),c=["components"],l={id:"handle-concurrency"},i="Handle Concurrency",s={unversionedId:"handle-concurrency",id:"handle-concurrency",isDocsHomePage:!1,title:"Handle Concurrency",description:"concurrent is a function that can handle multiple asynchronous values at once.",source:"@site/docs/handle-concurrency.md",sourceDirName:".",slug:"/handle-concurrency",permalink:"/docs/handle-concurrency",tags:[],version:"current",frontMatter:{id:"handle-concurrency"},sidebar:"docs",previous:{title:"Lazy Evaluation",permalink:"/docs/lazy-evaluation"},next:{title:"Error handling",permalink:"/docs/error-handling"}},u=[{value:"Useful Example",id:"useful-example",children:[],level:3},{value:"Note",id:"note",children:[],level:3}],p={toc:u};function d(e){var n=e.components,t=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"handle-concurrency"},"Handle Concurrency"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"concurrent")," is a function that can handle multiple asynchronous values at once.")),(0,a.kt)("p",null,"In javascript, there is a function to evaluate multiple promise values at the same time with ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all"},"Promise.all"),".\nHowever, it cannot handle the load of concurrent requests and cannot handle requests for infinite enumerable data sets.\n",(0,a.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/concurrent"},"concurrent")," can handle asynchronous requests of infinite datasets and can control the request size of the load."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// prettier-ignore\nimport { pipe, toAsync, range, map, filter, take, each, concurrent } from "@fxts/core";\n\nconst fetchApi = (page) =>\n  new Promise((resolve) => setTimeout(() => resolve(page), 1000));\n\nawait pipe(\n  range(Infinity),\n  toAsync,\n  map(fetchApi), // 0,1,2,3,4,5\n  filter((a) => a % 2 === 0),\n  take(3), // 0,2,4\n  concurrent(3), // If this line does not exist, it will take a total of 6 seconds.\n  each(console.log), // 2 seconds\n);\n')),(0,a.kt)("p",null,"You can see that it takes 6 seconds when requesting one by one but takes 2 seconds when requesting using ",(0,a.kt)("inlineCode",{parentName:"p"},"concurrent")),(0,a.kt)("h3",{id:"useful-example"},"Useful Example"),(0,a.kt)("p",null,"A more practical code is below."),(0,a.kt)("iframe",{src:"https://codesandbox.io/embed/fxts-concurrent-useful-0frg2?fontsize=14&hidenavigation=1&theme=dark",style:{height:800,width:"100%",border:0,borderRadius:4,overflow:"hidden"},title:"fxts-concurrent-useful",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}),(0,a.kt)("h3",{id:"note"},"Note"),(0,a.kt)("p",null,"If the position of ",(0,a.kt)("inlineCode",{parentName:"p"},"concurrent")," in the code above is as follows, would the result be different?\nNo, It would be same! Note that ",(0,a.kt)("inlineCode",{parentName:"p"},"concurrent")," always applies to ",(0,a.kt)("inlineCode",{parentName:"p"},"Iterable")," before the length is changed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"await pipe(\n  range(Infinity),\n  toAsync,\n  map(fetchApi),\n  concurrent(3),\n  filter((a) => a % 2 === 0),\n  take(3),\n  each(console.log),\n);\n")),(0,a.kt)("p",null,"If you want to sequentially evaluate up to ",(0,a.kt)("inlineCode",{parentName:"p"},"map")," one by one,\nand evaluate the asynchronous predicate of ",(0,a.kt)("inlineCode",{parentName:"p"},"filter")," three at the same time, you should write the code below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"await pipe(\n  range(Infinity),\n  toAsync,\n  map(fetchApi),\n  toArray,\n  filter((a) => delay(100, a % 2 === 0)),\n  take(3),\n  concurrent(3),\n  each(console.log),\n);\n")))}d.isMDXComponent=!0}}]);