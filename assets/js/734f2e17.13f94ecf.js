"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6598],{3905:function(e,n,r){r.d(n,{Zo:function(){return s},kt:function(){return f}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=t.createContext({}),l=function(e){var n=t.useContext(u),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},s=function(e){var n=l(e.components);return t.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=l(r),f=a,m=d["".concat(u,".").concat(f)]||d[f]||p[f]||o;return r?t.createElement(m,c(c({ref:n},s),{},{components:r})):t.createElement(m,c({ref:n},s))}));function f(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,c=new Array(o);c[0]=d;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=r[l];return t.createElement.apply(null,c)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6970:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return i},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return s},default:function(){return d}});var t=r(7462),a=r(3366),o=(r(7294),r(3905)),c=["components"],i={id:"reduce"},u=void 0,l={unversionedId:"reduce",id:"reduce",isDocsHomePage:!1,title:"reduce",description:"reduce() function",source:"@site/docs/reduce.md",sourceDirName:".",slug:"/reduce",permalink:"/docs/reduce",tags:[],version:"current",frontMatter:{id:"reduce"},sidebar:"docs",previous:{title:"pipe",permalink:"/docs/pipe"},next:{title:"some",permalink:"/docs/some"}},s=[{value:"reduce() function",id:"reduce-function",children:[],level:2},{value:"Example",id:"example",children:[],level:2}],p={toc:s};function d(e){var n=e.components,r=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"reduce-function"},"reduce() function"),(0,o.kt)("p",null,"Also known as foldl, reduce boils down a list of values into a single value."),(0,o.kt)("b",null,"Signature:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"declare function reduce<A>(f: (a: A, b: A) => A, iterable: Iterable<A>): A;\n\ndeclare function reduce<A, B>(f: (a: B, b: A) => B, iterable: Iterable<A>): B;\n\ndeclare function reduce<A extends readonly []>(f: Arrow, iterable: A): undefined;\n\ndeclare function reduce<A extends readonly [], B>(f: Arrow, seed: B, iterable: A): B;\n\ndeclare function reduce<A, B>(f: (a: B, b: A) => B, seed: B, iterable: Iterable<A>): B;\n\ndeclare function reduce<A, B>(f: (a: B, b: A) => B | Promise<B>, iterable: AsyncIterable<A>): Promise<B>;\n\ndeclare function reduce<A, B>(f: (a: B, b: A) => B | Promise<B>, seed: B | Promise<B>, iterable: AsyncIterable<A>): Promise<B>;\n\ndeclare function reduce<A extends Iterable<unknown> | AsyncIterable<unknown>, B>(f: (a: B, b: IterableInfer<A>) => B | Promise<B>): (iterable: A) => ReturnValueType<A, B>;\n\ndeclare function reduce<A extends Iterable<unknown> | AsyncIterable<unknown>>(f: (a: IterableInfer<A>, b: IterableInfer<A>) => IterableInfer<A> | Promise<IterableInfer<A>>): (iterable: A) => ReturnValueType<A, IterableInfer<A>>;\n")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const sum = (a:number, b:number) => a + b;\nreduce(sum, [1, 2, 3, 4]); // 10\nreduce(sum, 0, [1, 2, 3, 4]); // 10\n\n// with pipe\npipe(\n [1, 2, 3, 4],\n map(a => a + 10),\n filter(a => a % 2 === 0),\n reduce(sum),\n); // 26\n\nawait pipe(\n Promise.resolve([1, 2, 3, 4]),\n map((a) => a + 10),\n filter(a => a % 2 === 0),\n reduce(sum),\n); // 26\n\n// if you want to use asynchronous callback\nawait pipe(\n Promise.resolve([1, 2, 3, 4]),\n toAsync,\n map(async (a) => a + 10),\n filter(a => a % 2 === 0),\n reduce(sum),\n); // 26\n\n// with toAsync\nawait pipe(\n [Promise.resolve(1), Promise.resolve(2), Promise.resolve(3), Promise.resolve(4)],\n toAsync,\n map(a => a + 10),\n filter(a => a % 2 === 0),\n reduce(sum),\n); // 26\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/fxts-reduce-tf56j"},"Try It")),(0,o.kt)("p",null,"see ",(0,o.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/pipe"},"pipe"),", ",(0,o.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/toAsync"},"toAsync"),", ",(0,o.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/map"},"map"),", ",(0,o.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/filter"},"filter")))}d.isMDXComponent=!0}}]);