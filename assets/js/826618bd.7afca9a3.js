"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4913],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),i=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=i(e.components);return r.createElement(l.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,c=e.originalType,l=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),f=i(t),d=o,m=f["".concat(l,".").concat(d)]||f[d]||s[d]||c;return t?r.createElement(m,a(a({ref:n},p),{},{components:t})):r.createElement(m,a({ref:n},p))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var c=t.length,a=new Array(c);a[0]=f;var u={};for(var l in n)hasOwnProperty.call(n,l)&&(u[l]=n[l]);u.originalType=e,u.mdxType="string"==typeof e?e:o,a[1]=u;for(var i=2;i<c;i++)a[i]=t[i];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},8870:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return u},contentTitle:function(){return l},metadata:function(){return i},toc:function(){return p},default:function(){return f}});var r=t(7462),o=t(3366),c=(t(7294),t(3905)),a=["components"],u={id:"concurrent"},l=void 0,i={unversionedId:"concurrent",id:"concurrent",isDocsHomePage:!1,title:"concurrent",description:"concurrent() function",source:"@site/docs/concurrent.md",sourceDirName:".",slug:"/concurrent",permalink:"/docs/concurrent",tags:[],version:"current",frontMatter:{id:"concurrent"},sidebar:"docs",previous:{title:"concat",permalink:"/docs/concat"},next:{title:"drop",permalink:"/docs/drop"}},p=[{value:"concurrent() function",id:"concurrent-function",children:[],level:2},{value:"Example",id:"example",children:[],level:2}],s={toc:p};function f(e){var n=e.components,t=(0,o.Z)(e,a);return(0,c.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,c.kt)("h2",{id:"concurrent-function"},"concurrent() function"),(0,c.kt)("p",null,"Concurrent is used to balance the load of multiple asynchronous requests. The first argument receives a number that controls the number of loads, and the second argument is an AsyncIterable. See ",(0,c.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/toAsync"},"toAsync")," to create an AsyncIterable ."),(0,c.kt)("b",null,"Signature:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"declare function concurrent<A>(length: number, iterable: AsyncIterable<A>): AsyncIterableIterator<A>;\n\ndeclare function concurrent<A>(length: number, iterable?: AsyncIterable<A>): (iterable: AsyncIterable<A>) => AsyncIterableIterator<A>;\n")),(0,c.kt)("h2",{id:"example"},"Example"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"await pipe(\n  [1, 2, 3, 4, 5, 6],\n  toAsync,\n  map((a) => delay(1000, a)),\n  concurrent(3),\n  each(console.log), // log 1, 2, 3, 4, 5, 6\n); // 2 seconds\n\n// evaluation\n//              \u250c\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n//              \u2502  1  \u2502\u2500\u2500\u2502  2  \u2502\u2500\u2500\u2502  3  \u2502\u2500\u2500\u2502  4  \u2502\u2500\u2500\u2502  5  \u2502\u2500\u2500\u2502  6  \u2502\n//              \u2514\u2500\u2500\u252c\u2500\u2500\u2518  \u2514\u2500\u2500\u252c\u2500\u2500\u2518  \u2514\u2500\u2500\u252c\u2500\u2500\u2518  \u2514\u2500\u2500\u252c\u2500\u2500\u2518  \u2514\u2500\u2500\u252c\u2500\u2500\u2518  \u2514\u2500\u2500\u252c\u2500\u2500\u2518\n//      map        \u2502        \u2502        \u2502        \u2502        \u2502        \u2502\n// concurrent(3)  (1)      (1)      (1)      (2)      (2)      (2)\n//                 \u2502        \u2502        \u2502        \u2502        \u2502        \u2502\n//                 \u25bc        \u25bc        \u25bc        \u25bc        \u25bc        \u25bc\n\nawait pipe(\n  [1, 2, 3, 4, 5, 6],\n  toAsync,\n  map((a) => delay(1000, a)),\n  each(console.log), // log 1, 2, 3, 4, 5, 6\n); // 6 seconds\n\n// evaluation\n//              \u250c\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n//              \u2502  1  \u2502\u2500\u2500\u2502  2  \u2502\u2500\u2500\u2502  3  \u2502\u2500\u2500\u2502  4  \u2502\u2500\u2500\u2502  5  \u2502\u2500\u2500\u2502  6  \u2502\n//              \u2514\u2500\u2500\u252c\u2500\u2500\u2518  \u2514\u2500\u2500\u252c\u2500\u2500\u2518  \u2514\u2500\u2500\u252c\u2500\u2500\u2518  \u2514\u2500\u2500\u252c\u2500\u2500\u2518  \u2514\u2500\u2500\u252c\u2500\u2500\u2518  \u2514\u2500\u2500\u252c\u2500\u2500\u2518\n//      map        \u2502        \u2502        \u2502        \u2502        \u2502        \u2502\n//                (1)      (2)      (3)      (4)      (5)      (6)\n//                 \u2502        \u2502        \u2502        \u2502        \u2502        \u2502\n//                 \u25bc        \u25bc        \u25bc        \u25bc        \u25bc        \u25bc\n")),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/fxts-concurrent-4x58c"},"Try It")),(0,c.kt)("p",null,"see ",(0,c.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/pipe"},"pipe"),", ",(0,c.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/toAsync"},"toAsync"),", ",(0,c.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/toArray"},"toArray")," ",(0,c.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/each"},"each"),", ",(0,c.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/map"},"map")))}f.isMDXComponent=!0}}]);