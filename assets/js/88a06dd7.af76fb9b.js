"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8792],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),f=a,m=d["".concat(p,".").concat(f)]||d[f]||s[f]||o;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2469:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={id:"how-to-debug"},p="How to debug in pipeline easily?",c={unversionedId:"how-to-debug",id:"how-to-debug",isDocsHomePage:!1,title:"How to debug in pipeline easily?",description:"Strictly evaluation",source:"@site/docs/how-to-debug.md",sourceDirName:".",slug:"/how-to-debug",permalink:"/docs/how-to-debug",tags:[],version:"current",frontMatter:{id:"how-to-debug"},sidebar:"docs",previous:{title:"When to use the `toAsync` function?",permalink:"/docs/to-async"}},u=[{value:"Strictly evaluation",id:"strictly-evaluation",children:[],level:2},{value:"Lazy evaluation",id:"lazy-evaluation",children:[],level:2}],s={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-to-debug-in-pipeline-easily"},"How to debug in pipeline easily?"),(0,o.kt)("h2",{id:"strictly-evaluation"},"Strictly evaluation"),(0,o.kt)("p",null,"In strictly-evaluated pipeline, you can track changing of the value in the middle of the pipeline by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"tap")," function.\nIf you want to know more about the 'tap' function, see ",(0,o.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/tap"},"here"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"pipe(\n  \"2021/11/25\",\n  (str) => str.split(\"/\"),\n  tap(console.log), // ['2021', '11', '25']\n  (date) => date.map(Number),\n  tap(console.log), // [2021, 11, 25]\n  (date) => date.map((n) => (n === 1 ? 1 : n - 1)),\n  tap(console.log), // [2020, 10, 24]\n  (date) => new Date(...date),\n);\n")),(0,o.kt)("h2",{id:"lazy-evaluation"},"Lazy evaluation"),(0,o.kt)("p",null,"The code below creates a list of the 13th of Fridays, starting from January 1, 2000. Each function in the pipeline returns an ",(0,o.kt)("inlineCode",{parentName:"p"},"IterableIterator"),", Which means nothing happens until the ",(0,o.kt)("inlineCode",{parentName:"p"},"toArray")," function iterates through the ",(0,o.kt)("inlineCode",{parentName:"p"},"iterable")," and evaluates the value."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const addDate = (from: Date, n: number) => {\n  const clone = new Date(from);\n  clone.setDate(n);\n  return clone;\n};\nconst addDateFrom = (from: Date) => (n: number) => addDate(from, n);\nconst is13thOfFriday = (date: Date) =>\n  date.getDate() === 13 && date.getDay() === 5;\nconst formatYYYYMMDD = (date: Date) => {\n  return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n};\npipe(\n  range(1, Infinity),\n  map(addDateFrom(new Date(2000, 0, 1))),\n  filter(is13thOfFriday),\n  map(formatYYYYMMDD),\n  take(5),\n  toArray,\n  console.log,\n);\n// ['2000-10-13', '2001-4-13', '2001-7-13', '2002-9-13', '2002-12-13']\n")),(0,o.kt)("p",null,"Therefore, even if the logs are in the middle of the pipeline using the ",(0,o.kt)("inlineCode",{parentName:"p"},"tap")," function, It is hard to trace the actual evaluation process. Maybe you will only know that type of value is ",(0,o.kt)("inlineCode",{parentName:"p"},"IterableIterator"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"pipe(\n  range(1, Infinity),\n  map(addDateFrom(new Date(2000, 0, 1))),\n  filter(is13thOfFriday),\n  tap(console.log), // IterableIterator\n  map(formatYYYYMMDD),\n  tap(console.log), // IterableIterator\n  take(5),\n  toArray,\n);\n")),(0,o.kt)("p",null,"If you want to track the progress of this lazy evaluation, you can use the ",(0,o.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/peek"},"peek")," function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"pipe(\n  range(1, Infinity),\n  map(addDateFrom(new Date(2000, 0, 1))),\n  filter(is13thOfFriday),\n  peek(console.log),\n  map(formatYYYYMMDD),\n  peek(console.log),\n  take(5),\n  toArray,\n);\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/how-to-debug-t2tmb?file=/src/index.ts"},"The entire code is here.")))}d.isMDXComponent=!0}}]);