"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1400],{3905:function(T,e,a){a.d(e,{Zo:function(){return p},kt:function(){return c}});var t=a(7294);function i(T,e,a){return e in T?Object.defineProperty(T,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):T[e]=a,T}function n(T,e){var a=Object.keys(T);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(T);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(T,e).enumerable}))),a.push.apply(a,t)}return a}function f(T){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?n(Object(a),!0).forEach((function(e){i(T,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(T,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(e){Object.defineProperty(T,e,Object.getOwnPropertyDescriptor(a,e))}))}return T}function d(T,e){if(null==T)return{};var a,t,i=function(T,e){if(null==T)return{};var a,t,i={},n=Object.keys(T);for(t=0;t<n.length;t++)a=n[t],e.indexOf(a)>=0||(i[a]=T[a]);return i}(T,e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(T);for(t=0;t<n.length;t++)a=n[t],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(T,a)&&(i[a]=T[a])}return i}var r=t.createContext({}),w=function(T){var e=t.useContext(r),a=e;return T&&(a="function"==typeof T?T(e):f(f({},e),T)),a},p=function(T){var e=w(T.components);return t.createElement(r.Provider,{value:e},T.children)},A={inlineCode:"code",wrapper:function(T){var e=T.children;return t.createElement(t.Fragment,{},e)}},o=t.forwardRef((function(T,e){var a=T.components,i=T.mdxType,n=T.originalType,r=T.parentName,p=d(T,["components","mdxType","originalType","parentName"]),o=w(a),c=i,u=o["".concat(r,".").concat(c)]||o[c]||A[c]||n;return a?t.createElement(u,f(f({ref:e},p),{},{components:a})):t.createElement(u,f({ref:e},p))}));function c(T,e){var a=arguments,i=e&&e.mdxType;if("string"==typeof T||i){var n=a.length,f=new Array(n);f[0]=o;var d={};for(var r in e)hasOwnProperty.call(e,r)&&(d[r]=e[r]);d.originalType=T,d.mdxType="string"==typeof T?T:i,f[1]=d;for(var w=2;w<n;w++)f[w]=a[w];return t.createElement.apply(null,f)}return t.createElement.apply(null,a)}o.displayName="MDXCreateElement"},6510:function(T,e,a){a.r(e),a.d(e,{frontMatter:function(){return d},contentTitle:function(){return r},metadata:function(){return w},toc:function(){return p},default:function(){return o}});var t=a(7462),i=a(3366),n=(a(7294),a(3905)),f=["components"],d={id:"pipe"},r=void 0,w={unversionedId:"pipe",id:"pipe",isDocsHomePage:!1,title:"pipe",description:"pipe() function",source:"@site/docs/pipe.md",sourceDirName:".",slug:"/pipe",permalink:"/docs/pipe",tags:[],version:"current",frontMatter:{id:"pipe"},sidebar:"api",previous:{title:"pickBy",permalink:"/docs/pickBy"},next:{title:"reduce",permalink:"/docs/reduce"}},p=[{value:"pipe() function",id:"pipe-function",children:[],level:2},{value:"Example",id:"example",children:[],level:2}],A={toc:p};function o(T){var e=T.components,a=(0,i.Z)(T,f);return(0,n.kt)("wrapper",(0,t.Z)({},A,a,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"pipe-function"},"pipe() function"),(0,n.kt)("p",null,"Performs left to right function composition. The first argument can have any value; the remaining arguments must be unary."),(0,n.kt)("b",null,"Signature:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"declare function pipe<T1, R>(a: T1, f1: (a: Awaited<T1>) => R): ReturnPipeType<[T1, R]>;\n\ndeclare function pipe<T1, T2, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => R): ReturnPipeType<[T1, T2, R]>;\n\ndeclare function pipe<T1, T2, T3, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => R): ReturnPipeType<[T1, T2, T3, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => R): ReturnPipeType<[T1, T2, T3, T4, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => T9, f9: (a: Awaited<T9>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, T9, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => T9, f9: (a: Awaited<T9>) => T10, f10: (a: Awaited<T10>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => T9, f9: (a: Awaited<T9>) => T10, f10: (a: Awaited<T10>) => T11, f11: (a: Awaited<T11>) => T12, f12: (a: Awaited<T12>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => T9, f9: (a: Awaited<T9>) => T10, f10: (a: Awaited<T10>) => T11, f11: (a: Awaited<T11>) => T12, f12: (a: Awaited<T12>) => T13, f13: (a: Awaited<T13>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => T9, f9: (a: Awaited<T9>) => T10, f10: (a: Awaited<T10>) => T11, f11: (a: Awaited<T11>) => T12, f12: (a: Awaited<T12>) => T13, f13: (a: Awaited<T13>) => T14, f14: (a: Awaited<T14>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => T9, f9: (a: Awaited<T9>) => T10, f10: (a: Awaited<T10>) => T11, f11: (a: Awaited<T11>) => T12, f12: (a: Awaited<T12>) => T13, f13: (a: Awaited<T13>) => T14, f14: (a: Awaited<T14>) => T15, f15: (a: Awaited<T15>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => T9, f9: (a: Awaited<T9>) => T10, f10: (a: Awaited<T10>) => T11, f11: (a: Awaited<T11>) => T12, f12: (a: Awaited<T12>) => T13, f13: (a: Awaited<T13>) => T14, f14: (a: Awaited<T14>) => T15, f15: (a: Awaited<T15>) => T16, f16: (a: Awaited<T16>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => T9, f9: (a: Awaited<T9>) => T10, f10: (a: Awaited<T10>) => T11, f11: (a: Awaited<T11>) => T12, f12: (a: Awaited<T12>) => T13, f13: (a: Awaited<T13>) => T14, f14: (a: Awaited<T14>) => T15, f15: (a: Awaited<T15>) => T16, f16: (a: Awaited<T16>) => T17, f17: (a: Awaited<T17>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => T9, f9: (a: Awaited<T9>) => T10, f10: (a: Awaited<T10>) => T11, f11: (a: Awaited<T11>) => T12, f12: (a: Awaited<T12>) => T13, f13: (a: Awaited<T13>) => T14, f14: (a: Awaited<T14>) => T15, f15: (a: Awaited<T15>) => T16, f16: (a: Awaited<T16>) => T17, f17: (a: Awaited<T17>) => T18, f18: (a: Awaited<T18>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => T9, f9: (a: Awaited<T9>) => T10, f10: (a: Awaited<T10>) => T11, f11: (a: Awaited<T11>) => T12, f12: (a: Awaited<T12>) => T13, f13: (a: Awaited<T13>) => T14, f14: (a: Awaited<T14>) => T15, f15: (a: Awaited<T15>) => T16, f16: (a: Awaited<T16>) => T17, f17: (a: Awaited<T17>) => T18, f18: (a: Awaited<T18>) => T19, f19: (a: Awaited<T19>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, R]>;\n\ndeclare function pipe<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, R>(a: T1, f1: (a: Awaited<T1>) => T2, f2: (a: Awaited<T2>) => T3, f3: (a: Awaited<T3>) => T4, f4: (a: Awaited<T4>) => T5, f5: (a: Awaited<T5>) => T6, f6: (a: Awaited<T6>) => T7, f7: (a: Awaited<T7>) => T8, f8: (a: Awaited<T8>) => T9, f9: (a: Awaited<T9>) => T10, f10: (a: Awaited<T10>) => T11, f11: (a: Awaited<T11>) => T12, f12: (a: Awaited<T12>) => T13, f13: (a: Awaited<T13>) => T14, f14: (a: Awaited<T14>) => T15, f15: (a: Awaited<T15>) => T16, f16: (a: Awaited<T16>) => T17, f17: (a: Awaited<T17>) => T18, f18: (a: Awaited<T18>) => T19, f19: (a: Awaited<T19>) => T20, f20: (a: Awaited<T20>) => R): ReturnPipeType<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, R]>;\n")),(0,n.kt)("h2",{id:"example"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"pipe(\n [1, 2, 3, 4, 5],\n map(a => a + 10),\n filter(a => a % 2 === 0),\n toArray,\n); // [12, 14]\n\nawait pipe(\n Promise.resolve([1, 2, 3, 4, 5]),\n map(a => a + 10),\n filter(a => a % 2 === 0),\n toArray,\n); // [12, 14]\n\n// if you want to use asynchronous callback\nawait pipe(\n Promise.resolve([1, 2, 3, 4, 5]),\n toAsync,\n map(async (a) => a + 10),\n filter((a) => a % 2 === 0),\n toArray,\n); // [12, 14]\n\n// with toAsync\nawait pipe(\n [Promise.resolve(1), Promise.resolve(2), Promise.resolve(3), Promise.resolve(4), Promise.resolve(5)],\n toAsync,\n map(a => a + 10),\n filter(a => a % 2 === 0),\n toArray,\n); // [12, 14]\n")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/fxts-toarray-fy84i"},"Try It")),(0,n.kt)("p",null,"see ",(0,n.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/pipe"},"pipe"),", ",(0,n.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/toAsync"},"toAsync"),", ",(0,n.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/map"},"map"),", ",(0,n.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/filter"},"filter")))}o.isMDXComponent=!0}}]);