"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9231],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),s=c(n),d=a,m=s["".concat(p,".").concat(d)]||s[d]||f[d]||o;return n?r.createElement(m,l(l({ref:t},u),{},{components:n})):r.createElement(m,l({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=s;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},7774:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return u},default:function(){return s}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=["components"],i={id:"flatMap"},p=void 0,c={unversionedId:"flatMap",id:"flatMap",isDocsHomePage:!1,title:"flatMap",description:"flatMap() function",source:"@site/docs/flatMap.md",sourceDirName:".",slug:"/flatMap",permalink:"/docs/flatMap",tags:[],version:"current",frontMatter:{id:"flatMap"},sidebar:"docs",previous:{title:"flat",permalink:"/docs/flat"},next:{title:"map",permalink:"/docs/map"}},u=[{value:"flatMap() function",id:"flatmap-function",children:[],level:2},{value:"Example",id:"example",children:[],level:2}],f={toc:u};function s(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"flatmap-function"},"flatMap() function"),(0,o.kt)("p",null,"Returns flattened Iterable/AsyncIterable of values by running each element flattening the mapped results."),(0,o.kt)("b",null,"Signature:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"declare function flatMap<A, B = unknown>(f: (a: A) => B, iterable: Iterable<A>): IterableIterator<DeepFlat<B, 1>>;\n\ndeclare function flatMap<A, B = unknown>(f: (a: A) => B, iterable: AsyncIterable<A>): AsyncIterableIterator<DeepFlat<Awaited<B>, 1>>;\n\ndeclare function flatMap<A extends Iterable<unknown> | AsyncIterable<unknown>, B = unknown>(f: (a: IterableInfer<A>) => B, iterable?: A): (iterable: A) => ReturnIterableIteratorType<A, DeepFlat<FlatMapValue<B, A>, 1>>;\n")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const iter = flatMap(s => s.split(" "), ["It is", "a good", "day"]);\niter.next() // {done:false, value: "It"}\niter.next() // {done:false, value: "is"}\niter.next() // {done:false, value: "a"}\niter.next() // {done:false, value: "good"},\niter.next() // {done:false, value: "day"},\niter.next() // {done:true, value: undefined}\n\n// with pipe\npipe(\n ["It is", "a good", "day"],\n flatMap(s => s.split(" ")),\n toArray,\n); // ["It", "is", "a", "good", "day"]\n\nawait pipe(\n Promise.resolve(["It is", "a good", "day"]),\n flatMap(s => s.split(" ")),\n toArray,\n); // ["It", "is", "a", "good", "day"]\n')),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/fxts-flatmap-3g9k8"},"Try It")),(0,o.kt)("p",null,"see ",(0,o.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/pipe"},"pipe"),", ",(0,o.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/toAsync"},"toAsync"),", ",(0,o.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/toArray"},"toArray")))}s.isMDXComponent=!0}}]);