"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4456],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,f=d["".concat(p,".").concat(m)]||d[m]||c[m]||o;return n?a.createElement(f,l(l({ref:t},u),{},{components:n})):a.createElement(f,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8999:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),l=["components"],i={id:"lazy-evaluation"},p="Lazy Evaluation",s={unversionedId:"lazy-evaluation",id:"lazy-evaluation",isDocsHomePage:!1,title:"Lazy Evaluation",description:"FxTS provides lazy evaluation.",source:"@site/docs/lazy-evaluation.md",sourceDirName:".",slug:"/lazy-evaluation",permalink:"/docs/lazy-evaluation",tags:[],version:"current",frontMatter:{id:"lazy-evaluation"},sidebar:"docs",previous:{title:"Function Composition",permalink:"/docs/function-composition"},next:{title:"Handle Concurrency",permalink:"/docs/handle-concurrency"}},u=[{value:"Useful Example",id:"useful-example",children:[],level:3}],c={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"lazy-evaluation"},"Lazy Evaluation"),(0,o.kt)("p",null,"FxTS provides ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Lazy_evaluation"},"lazy evaluation"),".\nLet me explain through code why lazy evaluation is useful."),(0,o.kt)("p",null,"We often see code like the one below. By writing code declaratively, we want to make code that is maintainable and easy to read."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const sum = (a: number, b: number) => a + b;\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  .filter((a) => a % 2 === 0)\n  .map((a) => a * a)\n  .reduce(sum);\n")),(0,o.kt)("p",null,"It looks very readable. Now let's see how it works."),(0,o.kt)("p",null,"To treat it as ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Immutable_object"},"immutable"),", each time the method proceeds,\nan array of a new size is created and the array is traversed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  .filter((a) => a % 2 === 0) // [0, 2, 4, 6, 8]\n  .map((a) => a * a) // [0, 4, 16, 36, 64]\n  .reduce(sum); // 120\n")),(0,o.kt)("p",null,"Because it iterates through all the array values,\nthe logic that reduces the size of the array, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"slice")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"filter"),", is usually placed in front of the logic\n(That way you can have fewer traversals)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  .filter((a) => a % 2 === 0) // [0, 2, 4, 6, 8]\n  .slice(0, 2); // [0, 2]\n  .map((a) => a * a) // [0, 4]\n  .reduce(sum); // 4\n")),(0,o.kt)("p",null,"Currently, the size of array is very small, so it doesn't seem like a problem.\nBut if the size gets really big, do we have to go back to imperative programming?"),(0,o.kt)("p",null,"FxTS can be used as a combination of functions that deal with ",(0,o.kt)("inlineCode",{parentName:"p"},"Iterable"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"AsyncIterble"),",\nin which case it evaluates the value from the ",(0,o.kt)("inlineCode",{parentName:"p"},"Iterable"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"AsyncIterable")," only as needed."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"take(2)"),"(only 2 values) are evaluated and no further values are evaluated after that.\nIn addition, the above code ",(0,o.kt)("inlineCode",{parentName:"p"},"Array.prototype.filter")," needs to traverse all values,\nwhile the code below only evaluates the values it needs. Even the ",(0,o.kt)("inlineCode",{parentName:"p"},"filter"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"pipe(\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n  filter((a) => a % 2 === 0), // [0, 2]\n  map((a) => a * a), // [0, 4]\n  take(2), // [0, 4]\n  reduce(sum), // 4\n);\n")),(0,o.kt)("p",null,"FxTS are a useful way to represent large or possibly infinite enumerable data sets"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"pipe(\n  range(Infinity),\n  filter((a) => a % 2 === 0), // [0, 2]\n  map((a) => a * a), // [0, 4]\n  take(2), // [0, 4]\n  reduce(sum), // 4\n);\n")),(0,o.kt)("p",null,"Combinations of ",(0,o.kt)("inlineCode",{parentName:"p"},"Lazy")," functions don't evaluate actual values like ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator"},"generator"),".\nIt can be evaluated with a ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"},"for-of")," or\n",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of"},"await for-of"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"Strict")," functions. ",(0,o.kt)("inlineCode",{parentName:"p"},"Strict")," functions can be found ",(0,o.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/index#strict"},"here")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const squareNums = pipe(\n  range(Infinity),\n  map((a) => a * a),\n); // not evaluated not yet\n\nconst result = pipe(\n  squareNums,\n  filter((a) => a % 2 === 0),\n  take(10),\n  toArray, // Strict function\n);\n")),(0,o.kt)("p",null,"Lazy functions can be found ",(0,o.kt)("a",{parentName:"p",href:"https://fxts.dev/docs/index#lazy"},"here")),(0,o.kt)("h3",{id:"useful-example"},"Useful Example"),(0,o.kt)("p",null,"The code below shows a more useful situation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// {userId: number, id: number, title: string, complate: boolean}\nconst fetchTodo = async (page: number) =>\n  fetch(`https://jsonplaceholder.typicode.com/todos/${page}`);\n\nconst todoLists = async (pages: Iterable<number>) =>\n  pipe(\n    pages,\n    toAsync,\n    map(fetchTodo),\n    map((res) => res.json()),\n  );\n\nconst wordCount = async (start: number, end: number) =>\n  pipe(\n    range(start, end),\n    todoLists,\n    // // If you want to get only complated todo / Composition of Functions is easy\n    // filter((todo) => todo.completed),\n    map((todo) => todo.title.split(" ")),\n    flat,\n    countBy((word) => word),\n  );\n\nawait wordCount(1, 5);\n')))}d.isMDXComponent=!0}}]);